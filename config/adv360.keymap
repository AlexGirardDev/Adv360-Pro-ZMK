/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi>

&mt { tapping-term-ms = <125>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "turbos.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 37 38 53 54 55 68 69 70 71 35 36 52 65 66 67>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        escape_space: escape_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp SPACE>;
            label = "ESCAPE_SPACE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <48 49>;
            layers = <5>;
            timeout-ms = <150>;
        };

        combo_x {
            bindings = <&kp LC(X)>;
            key-positions = <49 50>;
            layers = <5>;
            timeout-ms = <150>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <51 50>;
            layers = <5>;
            timeout-ms = <150>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <47 48>;
            layers = <5>;
            timeout-ms = <150>;
        };

        combo_lefth_paran {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <41 42>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_right_param {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <42 43>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 24>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <24 25>;
            require-prior-idle-ms = <150>;
            layers = <5>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <55 56>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <56 57>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <17 18>;
            timeout-ms = <150>;
            layers = <5>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <30 31>;
            require-prior-idle-ms = <150>;
            layers = <5>;
        };

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 32>;
            layers = <5>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE               &kp N1     &kp N2     &kp N3      &kp N4     &kp N5  &kp F12                                                        &kp F9        &kp N6  &kp N7            &kp N8             &kp N9    &kp N0     &kp GRAVE
&kp TAB                  &kp SQT    &kp COMMA  &kp PERIOD  &kp P      &kp Y   &kp F6                                                         &kp HOME      &kp F   &kp G             &kp C              &kp R     &kp L      &kp BACKSLASH
&mt LEFT_CONTROL ESCAPE  &kp A      &kp O      &kp E       &kp U      &kp I   &kp F5     &kp PRINTSCREEN  &kp LALT          &kp LGUI  &mo 3  &kp END       &kp D   &kp H             &kp T              &kp N     &kp S      &kp SEMI
&kp LSHFT                &kp SLASH  &kp Q      &kp J       &kp K      &kp X                               &kp DEL           &to 5                          &kp B   &kp M             &kp W              &kp V     &kp Z      &kp ENTER
&kp LALT                 &kp UP     &kp DOWN   &kp MINUS   &kp EQUAL          &kp SPACE  &kp BSPC         &kp LEFT_GUI      &mo 0     &mo 6  &kp LEFT_GUI          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT  &kp RIGHT  &kp K_APP
            >;
        };

        layer_WOW {
            bindings = <
&trans  &N1_turbo            &N2_turbo     &trans    &N4_turbo  &N5_turbo  &f5_turbo                                           &trans  &trans  &trans  &trans  &trans  &trans  &to 0
&trans  &single_quote_turbo  &comma_turbo  &trans    &p_turbo   &y_turbo   &trans                                              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &a_turbo             &trans        &trans    &trans     &i_turbo   &trans     &trans       &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &slash_turbo         &q_turbo      &j_turbo  &k_turbo   &x_turbo                           &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans               &trans        &trans    &trans                &trans     &bspc_turbo  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_QWERTY {
            bindings = <
&kp ESC    &kp N1    &kp N2  &kp N3     &kp N4     &kp N5  &kp F12                                                       &trans    &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp GRAVE
&kp TAB    &kp Q     &kp W   &kp E      &kp R      &kp T   &kp F6                                                        &kp HOME  &kp Y   &kp U     &kp I      &kp O     &kp P     &kp BSLH
&kp LCTRL  &kp A     &kp S   &kp D      &kp F      &kp G   &kp F5     &kp PRINTSCREEN  &trans        &kp HOME  &to 0     &kp END   &kp H   &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z     &kp X   &kp C      &kp V      &kp B                               &kp DEL       &kp END                       &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&kp LALT   &kp DOWN  &kp UP  &kp MINUS  &kp EQUAL          &kp SPACE  &kp BSPC         &kp LGUI      &mo 5     &kp LGUI  &kp LGUI          &kp LBKT  &kp RBKT   &kp LEFT  &kp LEFT  &kp C_MENU
            >;
        };

        layer_red {
            bindings = <
&kp LA(F4)   &kp LC(LA(N1))    &kp LC(LA(N2))        &kp LC(LA(N3))    &kp LC(LA(N4))        &kp LC(LA(N5))  &kp LC(LA(F))                                                       &kp LC(LA(B))  &kp LC(LA(N6))   &kp LC(LA(N7))  &kp LC(LA(N8))  &kp LC(LA(N9))  &kp LC(LA(N0))  &kp LC(LA(MINUS))
&kp LA(ESC)  &kp LA(GRAVE)     &none                 &none             &none                 &kp PSCRN       &kp LC(LA(S))                                                       &kp LC(LA(W))  &kp LC(LS(TAB))  &kp N7          &kp N8          &kp N9          &trans          &trans
&trans       &kp LC(LA(H))     &kp LC(LA(J))         &kp LC(LA(K))     &kp LC(LA(L))         &kp LC(LA(O))   &kp LC(LA(G))  &bootloader  &bt BT_SEL 1      &bt BT_SEL 3  &trans  &kp LC(LA(R))  &kp LC(TAB)      &kp N4          &kp N5          &kp N6          &trans          &trans
&trans       &none             &none                 &none             &kp LC(LA(C))         &kp LC(LA(T))                               &bt BT_SEL 2      &none                                &kp LC(W)        &kp N1          &kp N2          &kp N3          &kp EQUAL       &trans
&trans       &kp LC(LA(LBKT))  &kp LS(LC(LA(LBKT)))  &kp LC(LA(RBKT))  &kp LS(LC(LA(RBKT)))                  &trans         &trans       &trans            &trans        &trans  &trans                          &kp RCTRL       &kp N0          &kp N0          &trans          &trans
            >;
        };

        layer_Symbols {
            bindings = <
&trans  &trans                &trans                &kp LG(N3)          &kp LG(N4)             &kp LG(N5)  &kp C_MUTE                                                         &kp C_PLAY_PAUSE  &trans     &trans          &trans    &trans     &trans     &kp KP_NUMLOCK
&trans  &kp EXCL              &kp AT                &kp HASH            &kp DLLR               &kp PRCNT   &kp C_VOL_UP                                                       &kp C_PREV        &kp CARET  &kp AMPS        &kp STAR  &kp LPAR   &kp RPAR   &trans
&trans  &kp LBKT              &kp SEMI              &kp LBRC            &kp LPAR               &kp GRAVE   &kp C_VOL_DN  &trans  &kp LC(LA(PAUSE_BREAK))      &trans  &trans  &kp C_NEXT        &kp TILDE  &kp RPAR        &kp RBRC  &kp COLON  &kp RBKT   &trans
&trans  &kp QMARK             &kp MINUS             &kp BSLH            &kp EQUAL              &kp LT                            &trans                       &trans                            &kp GT     &kp PLUS        &kp PIPE  &kp UNDER  &kp SLASH  &trans
&trans  &kp LC(LA(LS(LEFT)))  &kp LC(LA(LS(DOWN)))  &kp LC(LA(LS(UP)))  &kp LC(LA(LS(RIGHT)))              &mo 0         &trans  &trans                       &trans  &trans  &trans                       &kp SCROLLLOCK  &trans    &trans     &trans     &trans
            >;
        };

        new_default {
            bindings = <
&none         &none            &none            &none                &none              &none  &kp F12                                                        &kp F9    &none  &none              &none                &none            &none            &kp GRAVE
&kp TAB       &kp SQT          &kp COMMA        &kp PERIOD           &kp P              &kp Y  &kp F6                                                         &kp HOME  &kp F  &kp G              &kp C                &kp R            &kp L            &kp BSLH
&kp ESCAPE    &hml LEFT_ALT A  &hml LEFT_GUI O  &hml LEFT_CONTROL E  &hml LEFT_SHIFT U  &kp I  &kp F5     &kp PRINTSCREEN  &kp LEFT_GUI      &kp LGUI  &none  &kp END   &kp D  &hmr LEFT_SHIFT H  &hmr LEFT_CONTROL T  &hmr LEFT_GUI N  &hmr LEFT_ALT S  &kp SEMICOLON
&smart_shift  &kp SLASH        &kp Q            &kp J                &kp K              &kp X                              &kp DEL           &to 0                      &kp B  &kp M              &kp W                &kp V            &kp Z            &kp ENTER
&none         &kp UP           &kp DOWN         &none                &none                     &kp SPACE  &kp BSPC         &kp LEFT_GUI      &mo 6     &num_word  &sl 6            &none              &none                &kp LEFT         &kp RIGHT        &kp K_APP
            >;
        };

        new_fn {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                                                        &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp C_VOL_UP                                                  &trans  &trans  &kp N7  &kp N8   &kp N9   &trans   &trans
&trans  &trans  &none   &none   &none   &none   &kp C_VOLUME_DOWN  &trans  &to 0       &kp PAGE_UP    &trans  &trans  &trans  &kp N4  &kp N5   &kp N6   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                             &trans      &kp PAGE_DOWN                  &trans  &kp N1  &kp N2   &kp N3   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &escape_space      &trans  &trans      &trans         &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };
    };
};
